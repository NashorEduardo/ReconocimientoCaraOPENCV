// Esperar a que OpenCV.js esté cargado
cv['onRuntimeInitialized'] = async () => {
  // Obtener elementos del DOM
  const video = document.getElementById('video');
  const canvas = document.getElementById('canvas');
  const ctx = canvas.getContext('2d');

  // Acceder a la webcam
  const stream = await navigator.mediaDevices.getUserMedia({ video: true });
  video.srcObject = stream;
  video.play();

  // Cargar el clasificador Haar Cascade para detección facial
  const classifier = new cv.CascadeClassifier();
  const utils = new Utils('errorMessage'); // Para manejar errores
  const faceCascadeFile = 'haarcascade_frontalface_default.xml'; // Archivo XML del modelo

  utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {
    classifier.load(faceCascadeFile); // Cargar el modelo
    console.log('Modelo Haar Cascade cargado.');
  });

  // Procesar cada fotograma del video
  const processVideo = () => {
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height); // Dibujar el video en el canvas
    let frame = cv.imread(canvas); // Leer el fotograma como una imagen OpenCV

    // Convertir a escala de grises (requerido para Haar Cascades)
    let grayFrame = new cv.Mat();
    cv.cvtColor(frame, grayFrame, cv.COLOR_RGBA2GRAY);

    // Detectar rostros
    let faces = new cv.RectVector();
    let scaleFactor = 1.1;
    let minNeighbors = 3;
    let minSize = new cv.Size(50, 50);
    classifier.detectMultiScale(grayFrame, faces, scaleFactor, minNeighbors, 0, minSize);

    // Dibujar rectángulos alrededor de los rostros detectados
    for (let i = 0; i < faces.size(); ++i) {
      let face = faces.get(i);
      cv.rectangle(frame, face, [0, 255, 0, 255], 2); // Rectángulo verde
    }

    // Mostrar el resultado en el canvas
    cv.imshow(canvas, frame);

    // Liberar memoria
    frame.delete();
    grayFrame.delete();
    faces.delete();

    // Repetir el proceso
    requestAnimationFrame(processVideo);
  };

  // Iniciar el procesamiento
  processVideo();
};